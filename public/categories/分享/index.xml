<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分享 on 蓝胡子</title>
    <link>http://localhost:1313/categories/%E5%88%86%E4%BA%AB/</link>
    <description>Recent content in 分享 on 蓝胡子</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 21 Nov 2019 16:22:00 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/%E5%88%86%E4%BA%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python 命令行工具的框架</title>
      <link>http://localhost:1313/blog/python-cmdline-framework/</link>
      <pubDate>Thu, 21 Nov 2019 16:22:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/python-cmdline-framework/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BB%93%E6%9E%84&#34;&gt;框架的结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-dot-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7-utils&#34;&gt;1.常用的工具 &amp;ndash; utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-dot-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E6%93%8D%E4%BD%9C%E8%A7%A3%E6%9E%90-operation-manager&#34;&gt;2.命令行的操作解析 &amp;ndash; operation manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-dot-%E5%8A%9F%E8%83%BD%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%9D%97-plugin-manager&#34;&gt;3.功能插件模块 &amp;ndash; plugin manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-%E4%BB%A3%E7%A0%81%E5%BC%80%E6%BA%90&#34;&gt;github 代码开源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在很早前听到过这样一句话“程序中要是反复在写同样一个东西，那就是不合理的”，我们应该尽可能地把能用的部分抽象出来，
比如该有的工具，命令行的解析框架，引用到插件的框架。这些东西都是常用而且在每个项目中是独立的，不会跟其它模块有偶合。
那么正常我们怎么开始写一个命令行工具呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于custom.el文件</title>
      <link>http://localhost:1313/post/about-custom-file/</link>
      <pubDate>Fri, 15 Nov 2019 15:10:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/about-custom-file/</guid>
      <description>Saving Customizations - GNU Emacs Manual 官方详细说明
在emacs里面做的一些选择会记录在这个文件里面，比如进入dir-locals.el询问后 你的选择会写入这个文件. </description>
    </item>
    
    <item>
      <title>构建一个cocos js的框架</title>
      <link>http://localhost:1313/post/build-cocos-js-framework/</link>
      <pubDate>Thu, 14 Nov 2019 22:22:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/build-cocos-js-framework/</guid>
      <description>早在几年前有个面试官问我，一个游戏框架应该包括哪些内容，那时候还是处理“只可意会不可言传”随便回答了一些片面内容， 随着大型项目不断的增多，大部分的框架内容都是我负责搭建的，从搭建-&amp;gt;完善-&amp;gt;验证-&amp;gt;(修补-&amp;gt;再验证)*n-&amp;gt;总结后才会有 一个更好的总结。
什么是框架？ 字面意义 框架（建筑学概念）_百度百科
框架（framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题。我的理解 游戏框架其实很像一个“框架房”，要建一个小洋房，那会选建一个框架起来，把必要的支柱，楼梯，楼层高度先建起来，然后至于要填充 什么样的砖块、地板和家具等这些都是未知的。游戏也是一样，假如我们要做一款卡牌游戏，那么战斗、网络、引导、剧情、UI、声音、视频 和本地存储这些就是基本的支柱，其实就是用程序的面向对象思维把卡牌游戏抽象出公共的部分，然后把这些部分高内聚低偶合地模块化。
不同类型游戏框架会有所差异 不同类型的游戏需要是不一样的，如果你是单机游戏，你其实不必要为框架添加网络模块
如何构建？ *</description>
    </item>
    
    <item>
      <title>Cocos2dx优化之RenderTexture</title>
      <link>http://localhost:1313/post/cocos2dx-rendertexture1/</link>
      <pubDate>Sun, 27 Jan 2019 18:21:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/cocos2dx-rendertexture1/</guid>
      <description>为什么要用 游戏有一个指标是GPU渲染，做过优化的人应该对Opengl的drawcall应该都很熟悉，cocos2dx里面还有个batchnode就是批渲染 这个可以减少drawcall，但这个其实就是减少渲染流程，要达到一定的量级才会体现效果，平时那个几十个是基本影响不大。我自己测试 都是上千个数量级会效果。而且有很大的局限性，因为它要求材质必需是同一个，而这个材质包括Texture,BlendFunc,shader，只要 一个是不同的便不行，这种痛你们自己感受才明白。接下来我提的另外一种更有效的方案，那就是RenderTexture,它要做的主要事情就 是把一些碎小的元素绘制出来，然后把它们截取出来，利用的是Opengl FBO技术，如果把它们融合在一张再去绘制，那就可以大大降低 GPU的绘制时间，可以降低耗电量。 但这个是有代价的，你必要多一张绘制后大小的尺寸的占用内存，还有读取FBO消耗的性能。
什么时候用 了解完RenderTexture优点缺点后，我们要分析什么时候用它，一般我们会用它在列表上面，特别是一些不常变动的列表上面，如果列表项 越复杂，那它的效果就越明显，比如一个列表上是十个drawcall,那显示20，那就是200个drawcall， 这个量级应该是比较难接受的， 如果使用RenderTexture那就是20个，10倍的差距了解一下。
怎么用 </description>
    </item>
    
    <item>
      <title>mac下svn常用操作命令</title>
      <link>http://localhost:1313/post/svn-common-operation/</link>
      <pubDate>Fri, 16 Nov 2018 14:33:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/svn-common-operation/</guid>
      <description>svn配置BeyondCompare对比工具 Beyond Compare 官方说明
常规操作 检出工程 svn co url 查看当前状态 svn st 添加文件或者文件夹 svn add . --force 查看当前修改 svn diff 其它 svn help
进阶操作 删除所有不存在的文件和文件夹 svn st|awk &amp;#39;{if($1==&amp;#34;!&amp;#34;){print $2}}&amp;#39;|xargs svn rm 增加？号文件 svn st|awk &amp;#39;{if($1==&amp;#34;?&amp;#34;){print $2}}&amp;#39;|xargs svn add 提交m文件文件 svn st|awk &amp;#39;{if($1==&amp;#34;m&amp;#34;){print $2}}&amp;#39;|xargs svn ci -m &amp;#34;comments&amp;#34; </description>
    </item>
    
    <item>
      <title>游戏里面的技能该如何定义？</title>
      <link>http://localhost:1313/post/what-is-skill/</link>
      <pubDate>Wed, 18 Apr 2018 19:43:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/what-is-skill/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AF%BC%E7%81%AB%E7%B4%A2&#34;&gt;导火索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8A%80%E8%83%BD&#34;&gt;什么是技能？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%99%BE%E5%BA%A6%E7%9A%84%E6%8A%80%E8%83%BD&#34;&gt;百度的技能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%88%91%E7%9A%84%E7%BF%BB%E8%AF%91&#34;&gt;我的翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8E%BB%E6%B7%B1%E7%A9%B6%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98&#34;&gt;为什么要去深究这个问题？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%8D%E5%90%8C%E7%9A%84%E6%8B%86%E8%A7%A3%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%84&#34;&gt;不同的拆解会有不同的结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%90%88%E7%90%86%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BC%9A%E8%AE%A9%E7%BB%93%E6%9E%84%E6%9B%B4%E6%B8%85%E6%99%B0&#34;&gt;合理的定义会让结构更清晰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%88%91%E7%9A%84%E5%81%9A%E6%B3%95&#34;&gt;我的做法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%80%9A%E9%81%93&#34;&gt;通道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%85%A8%E9%83%A8%E6%8C%87%E5%90%91%E9%80%9A%E9%81%93&#34;&gt;全部指向通道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;导火索&#34;&gt;导火索&lt;/h2&gt;
&lt;p&gt;英雄A 技能1 释放一个火球打敌人身上会产生灼烧3秒，每秒损失50点生命值。&lt;/p&gt;
&lt;p&gt;火球和灼烧效果是属于这个技能的吗？
有问过不少策划，他们觉得是。而且他们会随便找个人问下，都会觉得是。这个是我比较不能理解的地方，所以我开始展开我的探索。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
