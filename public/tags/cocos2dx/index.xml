<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cocos2dx on 蓝胡子</title>
    <link>https://lanhuzi.com/tags/cocos2dx/</link>
    <description>Recent content in Cocos2dx on 蓝胡子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Wed, 31 Oct 2018 01:44:00 +0800</lastBuildDate>
    
	<atom:link href="https://lanhuzi.com/tags/cocos2dx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>android so path 被锁定</title>
      <link>https://lanhuzi.com/posts/android-so-path-lock/</link>
      <pubDate>Wed, 31 Oct 2018 01:44:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/android-so-path-lock/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 环境 2 问题 3 思路及解决  3.1 问题分析 3.2 解决方案  4 结果   
1 环境 接XXSDK的时候
2 问题 java 加载so的时候闪退
3 思路及解决 3.1 问题分析 首先定位到闪退的地方是在加载cocos2dxlua.so的地方，因为接过不少SDK，之前SDK在这个地方没有出现闪退的现象，就开始找不同之处。 很快问题就缩小到几个平台的SO文件夹里面，后面经过去一些QQ群讨论，发现linux搜索SO库的时候会有一个“锁定机制”。 也就是第一个去找的路径会被锁定，锁定后就不会再变更，下次再找会直接去这个目录下查找，哪怕是找不到。
3.2 解决方案 方法一：将每个平台都放满SO 方法二：没用到的平台直接删除了
4 结果 正常运行。</description>
    </item>
    
    <item>
      <title>android-armeabi-lib-lock</title>
      <link>https://lanhuzi.com/posts/android-armeabi-lib-lock/</link>
      <pubDate>Fri, 13 Oct 2017 15:05:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/android-armeabi-lib-lock/</guid>
      <description>  .ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 问题 cocos2dxlua.so 放在armeabi-v7a下 接SDK又引入 armeabi 几个so 结果会出现找不到cocos2dxlua.so 这个文件 导致崩溃 2 armeabi 路径会搜索一次 如果找到会锁定 下次就只会在这个目录下查找   
1 问题 cocos2dxlua.so 放在armeabi-v7a下 接SDK又引入 armeabi 几个so 结果会出现找不到cocos2dxlua.so 这个文件 导致崩溃 2 armeabi 路径会搜索一次 如果找到会锁定 下次就只会在这个目录下查找 </description>
    </item>
    
    <item>
      <title>Android SDK 不会自己删除服务问题</title>
      <link>https://lanhuzi.com/posts/android-sdk-service-stop-problem/</link>
      <pubDate>Wed, 26 Jul 2017 16:04:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/android-sdk-service-stop-problem/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 环境 2 问题 3 解决思路  3.1 查找根源 3.2 解决方案  4 结果   
1 环境 接android SDK
2 问题 游戏退出或者崩溃后，快速进入游戏会一直崩溃。
3 解决思路 3.1 查找根源 打开游戏后台发现游戏里面一直有一个服务存在，是SDK的浮窗服务，经过跟渠道交流后，主要有因为SDK 如果浮窗没有初始化成功，就会主动退出游戏。 还有一种情况是服务本身会自起动，所以如果一进游戏未初始化好，服务因为自启动会没有成功导致崩溃
3.2 解决方案 修改SDK 在Apllication的onCreate方法里面把浮窗服务先停止并关闭自启动
4 结果 完美解决</description>
    </item>
    
    <item>
      <title>cocos2dx android ui and gl threads</title>
      <link>https://lanhuzi.com/posts/cocos2dx-android-threads/</link>
      <pubDate>Fri, 19 May 2017 01:18:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/cocos2dx-android-threads/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 环境 2 问题 3 思路及解决  3.1 思路 3.2 解决方案  4 结果   
1 环境 搞android SDK 的时候，因为接quickSDK没有lua版本，只好用android 原生版本，自己写 java跟lua的交互
2 问题 java 跟 lua 交互有概率性的会出现闪退
3 思路及解决 3.1 思路 这种概率性的闪退，一般都是线程不安全导致的，于是我就去找，看到cocos2dx 里面有很多用到
mActivity:runOnUiThread(new Runnable(){ public void run() { // xxoo xxoo } })  然后我就认为这个是cocos2dx的主线程，然后就拼命的用它去调用lua,结果就是闪退不断， 这个时候我觉得是不对的，如果这个是主线程是不可能有这个问题，于是我再去找，发现一个方法长得跟它很像的
mActivity:runOnGLThread(new Runnable(){ public void run() { // xxoo xxoo } })  这时候我才清楚，原来这个GL线程才是我们游戏线程，UI线程是UI框架的，如果调用高级UI或者SDK就需要用UI线程。</description>
    </item>
    
    <item>
      <title>cocos2dx etc 闪退问题</title>
      <link>https://lanhuzi.com/posts/cocos2dx-etc1-crash/</link>
      <pubDate>Tue, 16 May 2017 10:19:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/cocos2dx-etc1-crash/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 环境 2 问题 3 思路及解决  3.1 问题分析 3.2 解决方案  4 结果   
1 环境 稳定性测试期
2 问题 部分机型和部分模拟器会因为ETC1资源导致闪退
07-13 21:59:43.727 E/szipinf (21935): Error reading asset data 07-13 21:59:43.727 E/szipinf (21935): Unable to access asset data: -1  3 思路及解决 3.1 问题分析 经过调试发现是因为只有部分ETC1资源没有办法正常加载，于是我就把没办法正常加载的资源取出来找规律， 然后我发现了它们都有一个相同的问题，就是有大部分的透明区域，就是没有用的区域，大概是因为ETC1格式压缩 的问题和这些闪退的机型协议不一致所导致的，我也不想去深究。
3.2 解决方案 我尝试在整张图片周围画一个距形的红框，目的让资源四周都有像素，果然闪退解决
4 结果 做图工具升级，完美解决</description>
    </item>
    
    <item>
      <title>cocos2dx FileUtils 缓存机制</title>
      <link>https://lanhuzi.com/posts/cocos2dx-fileutils-cache/</link>
      <pubDate>Fri, 12 May 2017 15:36:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/cocos2dx-fileutils-cache/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 背景 2 问题 3 思路及解决  3.1 首先查看搜索路径 3.2 路径缓存起来  4 结果   
1 背景 处理热lua更新功能
2 问题 有些文件没有没有获取最新下载的资源，依然是使用旧的
3 思路及解决 3.1 首先查看搜索路径 dump(cc.FileUtils:getInstance():getSearchPaths()) -- 结果是没有问题的  3.2 路径缓存起来 std::string FileUtils::fullPathForFilename(const std::string &amp;amp;filename) const { if (filename.empty()) { return &amp;quot;&amp;quot;; } if (isAbsolutePath(filename)) { return filename; } // Already Cached ? auto cacheIter = _fullPathCache.</description>
    </item>
    
    <item>
      <title>android etc1 黑块问题</title>
      <link>https://lanhuzi.com/posts/cocos2dx-android-black-block/</link>
      <pubDate>Wed, 03 May 2017 03:40:00 +0800</pubDate>
      
      <guid>https://lanhuzi.com/posts/cocos2dx-android-black-block/</guid>
      <description>.ox-hugo-toc ul { list-style: none; }  
Table of Contents  1 环境 2 问题 3 解决思路  3.1 查找根源 3.2 查找为什么会出现黑块  4 结果   
1 环境 接android SDK
2 问题 在SDK返回的时候，部分UI会出现黑块，LOG会提示Opengl GL 502等错误
3 解决思路 3.1 查找根源 一开始我的处理方案是把那些异常的资源重新加载，是可以解决大部分问题，但觉得这并不上策。于是我再继续找根源。。。 根源是因为SDK在初始化|登录|支付的回调中去可能去调用到我们的UI，这个回调的线程并不是*Cocos2dxUI线程*，这样子操作UI是不能保证先后顺序，这个时候android机子会触发重新加载资源的时机。 所以部分重载一半或者一些不预料的黑块就出现了。
function () xxx:runAction(cc.Sequence:create( cc.DelayTime:create(0.02), cc.CallFunc:create(function () -- ... do something end))) end  3.2 查找为什么会出现黑块 4 结果 完美解决黑块问题</description>
    </item>
    
  </channel>
</rss>