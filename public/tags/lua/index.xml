<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lua on 蓝胡子</title>
    <link>http://www.lanhuzi.com/tags/lua/</link>
    <description>Recent content in lua on 蓝胡子</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Sep 2020 16:39:00 +0800</lastBuildDate><atom:link href="http://www.lanhuzi.com/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cocos2d-x性能优化之CPU</title>
      <link>http://www.lanhuzi.com/cocos-cup-optimization/</link>
      <pubDate>Wed, 16 Sep 2020 16:39:00 +0800</pubDate>
      
      <guid>http://www.lanhuzi.com/cocos-cup-optimization/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E6%89%BE%E6%80%A7%E8%83%BD%E7%9A%84%E7%93%B6%E9%A2%88&#34;&gt;查找性能的瓶颈&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%B7%A5%E5%85%B7%E7%9A%84%E9%80%89%E6%8B%A9&#34;&gt;工具的选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90&#34;&gt;开始分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B9%E6%A1%88%E9%80%89%E6%8B%A9&#34;&gt;方案选择&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%87%8F%E5%B0%91%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&#34;&gt;减少更新内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%8D%E6%9B%B4%E6%96%B0%E4%B8%8D%E5%BF%85%E8%A6%81%E6%98%BE%E7%A4%BA%E7%9A%84%E5%8A%A8%E7%94%BB&#34;&gt;不更新不必要显示的动画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%80%BB%E7%BB%93&#34;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;优化从来不是凭感觉去看代码，而是利用有效的工具，去测出游戏的性能瓶颈，然后找到解决方法。
最近在给一款游戏做CPU优化，就把过程记录下来，分享一下，欢迎纠正讨论。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在lua正确识别字符串长度</title>
      <link>http://www.lanhuzi.com/lua-utf8-string-length/</link>
      <pubDate>Fri, 28 Apr 2017 15:06:00 +0800</pubDate>
      
      <guid>http://www.lanhuzi.com/lua-utf8-string-length/</guid>
      <description>function getCharacterLen(str) local nStrLen = 0 for uchar in string.gfind(replaceNewLine(str), &amp;#34;[%z\1-\127\194-\244][\128-\191]*&amp;#34;) do if string.len(uchar) == 3 then nStrLen = nStrLen + 2 else nStrLen = nStrLen + 1 end end return nStrLen end </description>
    </item>
    
    <item>
      <title>巧妙的使用coroutine分散计算量</title>
      <link>http://www.lanhuzi.com/lua-coroutine/</link>
      <pubDate>Fri, 28 Apr 2017 15:06:00 +0800</pubDate>
      
      <guid>http://www.lanhuzi.com/lua-coroutine/</guid>
      <description>问题描述 最近一直在优化android相关的内容 在战斗模块上吃了一个亏，本应该可以忽略的一部分，寻敌跟寻位耗大量的CPU时间导致战斗暴卡
问题分析 优化算法 一开始是尽量优化整个算法，但游戏本身在寻敌和寻位的复杂度就要有一定的开销，降低了差不多有一半的消耗，但最终还是达不到一个理想的效果
多线程 考虑到现在android单核计算能力实在有限，就开始考虑用多线程来单独计算战斗模块。 因为战斗是用纯lua写的，如果要用单独纯种就得多开一个luaState，而且数据交互也是比较麻烦，因时间关系就先放下了。
协程 在lua里面还有一个神器就是协程了，因为战斗模型的一帧是100ms，游戏一界面表现一帧是16ms，所以过程就提供了分担的时间。 方式一
for i=1,10 do -- do something -- ... if i % 2 == 0 then coroutine.yield() end end 方式二
local nLastClock = os.clock() for i=1,10 do -- do something -- ... if os.clock() - nLastClock &amp;gt; 16 then coroutine.yield() end end 解决方案 使用协程的方案，一旦在coroutine.yield()前的数据是生效的，切记在表现的时候要把这部分的未完全执行完的帧resume起来</description>
    </item>
    
  </channel>
</rss>
